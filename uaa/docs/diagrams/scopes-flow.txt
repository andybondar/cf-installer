participant User
note over Client: {id: mgt}
note over ResourceServer: {id: cc}
User->Client: peek
activate User
activate Client
Client->AuthServer: {client_id: mgt, scope: cc/read}
activate AuthServer
AuthServer->ClientRegistry: {client_id: mgt}
activate ClientRegistry
ClientRegistry->AuthServer: {scopes: [cc/read, cc/write, cc-exp/read])
deactivate ClientRegistry
note over AuthServer: scopes.contains(scope)?
opt ResourceServer visible and supports message discovery
note left of AuthServer: 
scope is a valid URI so AuthServer
can use it to extract UI messages
for the approval dialogue
end note
AuthServer->ResourceServer: cc/read
activate ResourceServer
ResourceServer->AuthServer: messages for UI
deactivate ResourceServer
end
AuthServer->User: {messages: "Do you approve client=mgt to read \nyour cc resources?"}
activate User
User->AuthServer: approve
deactivate User
AuthServer->AuthServer: create_token
AuthServer->TokenService: access_token->{client_id: mgt, scope: read}
AuthServer->Client: access_token
deactivate AuthServer
Client->ResourceServer: request(access_token)
activate ResourceServer
ResourceServer->TokenService: access_token
activate TokenService
TokenService->ResourceServer: {client_id: mgt, scope: cc/read}
deactivate TokenService
note over ResourceServer: scope permitted?
ResourceServer->Client: response
deactivate ResourceServer
Client->User: result
